---
# Copyright 2016, JinkIT, and it's Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


#Checks for current SDN Deployment, if no deployment exists, deploy SDN defined in group_vars/all
- name: check for an existing sdn deployment
  shell: kubectl get pods -o wide --all-namespaces
  register: kube_podlist
  ignore_errors: true

- name: stat for existing sdn deployment
  stat:
    path: /etc/kubernetes/halcyon/network/.bootstrapped
  register: sdn_exists

- name: check for existing weave deployment
  shell: kubectl get pods -o wide --all-namespaces
  when: kube_podlist.stdout | search("weave")
  register: sdn_deployed_weave
  ignore_errors: true

- name: set fact when weave is deployed
  set_fact:
    weave_deployed: true
  when: sdn_deployed_weave|changed

- name: set fact when weave is not deployed
  set_fact:
    weave_deployed: false
  when: sdn_deployed_weave|skipped

- name: check for existing Calico deployment
  shell: kubectl get pods -o wide --all-namespaces
  when: kube_podlist.stdout | search("calico")
  register: sdn_deployed_calico
  ignore_errors: true

- name: set Fact when calico is deployed
  set_fact:
    calico_deployed: true
  when: sdn_deployed_calico|changed

- name: set Fact when calico is not deployed
  set_fact:
    calico_deployed: false
  when: sdn_deployed_calico|skipped

- name: check for existing canal deployment
  shell: kubectl get pods -o wide --all-namespaces
  when: kube_podlist.stdout | search("canal")
  register: sdn_deployed_canal
  ignore_errors: true

- name: set fact when canal is deployed
  set_fact:
    canal_deployed: true
  when: sdn_deployed_canal|changed

- name: set fact when canal is not deployed
  set_fact:
    canal_deployed: false
  when: sdn_deployed_canal|skipped

- name: check for existing romana deployment
  shell: kubectl get pods -o wide --all-namespaces
  when: kube_podlist.stdout | search("Romana")
  register: sdn_deployed_romana
  ignore_errors: true

- name: set fact when romana is deployed
  set_fact:
    romana_deployed: true
  when: sdn_deployed_romana|changed

- name: set fact when Romana is not deployed
  set_fact:
    romana_deployed: false
  when: sdn_deployed_romana|skipped



# Run SDN Specific Playbooks only if no SDN is installed. Checks also if particular SDN is installed.
- name: deploy weave
  include: kube-weave.yml
  when: kube_sdn_deploy and weave_deployed == false and {{ item }} == false and kube_sdn == "weave"
  with_items:
    - calico_deployed
    - weave_deployed
    - romana_deployed
    - canal_deployed

- name: deploy calico
  include: kube-calico.yml
  when: kube_sdn_deploy and calico_deployed == false and {{ item }} == false and kube_sdn == "calico"
  with_items:
    - calico_deployed
    - weave_deployed
    - romana_deployed
    - canal_deployed

- name: ceploy canal
  include: kube-canal.yml
  when: kube_sdn_deploy and canal_deployed == false and {{ item }} == false and kube_sdn == "canal"
  with_items:
    - calico_deployed
    - weave_deployed
    - romana_deployed
    - canal_deployed

- name: deploy romana
  include: kube-romana.yml
  when: kube_sdn_deploy and romana_deployed == false and {{ item }} == false and kube_sdn == "romana"
  with_items:
    - calico_deployed
    - weave_deployed
    - romana_deployed
    - canal_deployed

- name: ensure sdn bootstrap directory exists
  file: path=/etc/kubernetes/halcyon/network state=directory
  when: (kube_sdn_deploy == 'true') and (sdn_exists.stat.exists == 'false')
  ignore_errors: true

- name: creating sdn deployment artifact
  template:
    src: templates/bootstrap-sdn.j2
    dest: /etc/kubernetes/halcyon/network/.bootstrapped
    backup: no
    owner: root
    group: root
  when: (kube_sdn_deploy) and (sdn_exists.stat.exists == 'false')
  ignore_errors: true
