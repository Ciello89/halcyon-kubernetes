---
# Copyright 2016, JinkIT, and it's Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

- name: check for an existing sdn deployment
  shell: kubectl get pods -o wide --all-namespaces
  register: kube_podlist
  ignore_errors: true

# Debug `kubectl` output:
#- name: debug bootstrap output
#  debug: msg="{{ kube_podlist }}"

- name: check for existing calico deployment
  shell: kubectl get pods -o wide --all-namespaces
  when: kube_podlist.stdout | search("calico")
  register: sdn_deployed_calico
  ignore_errors: true

- name: check for existing canal deployment
  shell: kubectl get pods -o wide --all-namespaces
  when: kube_podlist.stdout | search("canal")
  register: sdn_deployed_canal
  ignore_errors: true

- name: check for existing romana deployment
  shell: kubectl get pods -o wide --all-namespaces
  when: kube_podlist.stdout | search("romana")
  register: sdn_deployed_romana
  ignore_errors: true

- name: check for existing weave deployment
  shell: kubectl get pods -o wide --all-namespaces
  when: kube_podlist.stdout | search("weave")
  register: sdn_deployed_weave
  ignore_errors: true

- name: checking if sdn already exists
  set_fact: sdn_bootstrap_exists
  when: ["sdn_deployed_calico","sdn_deployed_canal","sdn_deployed_romana","sdn_deployed_weave"]
  ignore_errors: true
  register: sdn_exists

# Debug sdn exists condition:
#- name: debug sdn exist output
#  debug: msg="{{ sdn_exists }}"

- name: setting sdn deploy fact
  set_fact: sdn_bootstrap_deploy
  when: [sdn_bootstrap_exists == 'false']
  ignore_errors: true
  register: sdn_deploy

# Debug sdn exists condition:
- name: debug sdn deploy output
  debug: msg="{{ sdn_deploy }}"

- include: kube-calico.yml
  when:
    - kube_sdn == "calico"
    - kube_sdn_deploy == true
    - sdn_bootstrap_deploy == true
  ignore_errors: true
  register: deploy-calico

- include: kube-canal.yml
  when:
    - kube_sdn == "canal"
    - kube_sdn_deploy == true
    - sdn_bootstrap_deploy == true
  ignore_errors: true
  register: deploy-canal

- include: kube-romana.yml
  when:
    - kube_sdn == "romana"
    - kube_sdn_deploy == true
    - sdn_bootstrap_deploy == true
  ignore_errors: true
  register: deploy-romana

- include: kube-weave.yml
  when:
    - kube_sdn == "weave"
    - kube_sdn_deploy == true
    - sdn_bootstrap_deploy == true
  ignore_errors: true
  register: deploy-weave

- name: ensure sdn bootstrap directory exists
  file: path=/etc/kubernees/halcyon/network state=directory
  when:
    - kube_sdn_deploy == true
  ignore_errors: true

- name: creating sdn deployment artifact
  template:
    src: templates/bootstrap-sdn.j2
    dest: /etc/kubernees/halcyon/network/.bootstrapped
    backup: no
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"
  when:
    - kube_sdn_deploy == true
  ignore_errors: true
